#!/usr/bin/env python

# File: __init__.py
# Written By: Luis Moraguez
# Description: The Controller of the FXML app, handles routes to pages and API as well as connections to DB (Models)

# IMPORTS
from dotenv import load_dotenv
from flask import Flask, render_template, request
from playhouse.shortcuts import model_to_dict
from .database import *
from .fx_accounts import *
from collections import defaultdict

# APP INITIALIZATION
load_dotenv()
app = Flask(__name__)

# APP HOOKS
db = database.db

# APP MODE
if os.getenv("FLASK_ENV") == "production":
    mode = True
else:
    mode = False

# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    db.connect()

# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()

# APP ROUTES
@app.route('/')
def index():
    return render_template("index.html", mode=mode)

@app.route('/about')
def about():
    return render_template("about.html", mode=mode)

@app.route('/accounts', methods=["GET", "POST"])
def accounts():
    if request.method == "GET":
        _accounts = get_accounts()
        #_accounts = {'accounts': [{'id': '101-001-9767704-001', 'tags': []}, {'id': '101-001-9767704-001', 'tags': []}]}
        if _accounts is not None:
            d = defaultdict(list)
            for account in _accounts['accounts']:
                d['id'].append(account['id'])
                d['bal'].append(get_account(account['id'])['account']['balance'])
                d['alias'].append(get_account(account['id'])['account']['alias'])
            d['size'] = len(d['id'])
            _accounts = d
            return render_template("accounts.html", _accounts=_accounts, mode=mode)
        else:
            return render_template("accounts.html", _accounts="None", mode=mode)
    else:
        return "Invalid request", 400

@app.route('/accounts/<id>', methods=["GET", "POST"])
def account_by_id(id):
    if request.method == "GET":
        _account = get_account(id)
        if _account is not None:
            return render_template("account.html", _account=_account['account'], mode=mode)
        else:
            return render_template("account.html", _account="None", mode=mode)
    else:
        return "Invalid request", 400

@app.route('/positionsizing')
def positionSizing():
    return render_template("positionsizing.html", mode=mode)